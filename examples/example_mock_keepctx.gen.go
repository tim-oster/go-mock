// Code generated by go-mock. DO NOT EDIT.
// version: go-mock v0.1.1
// source: example.go
// interface: KeepCtx
// flags: keepctx=true unexported=false
package examples

import (
	"context"
	mock "github.com/stretchr/testify/mock"
	"testing"
)

var _ KeepCtx = (*MockKeepCtx)(nil)

type MockKeepCtx struct {
	mock.Mock
}

func (x *MockKeepCtx) Normal(b_ bool) (int, error) {
	args := x.Called(b_)
	if len(args) > 0 {
		if t, ok := args.Get(0).(mockKeepCtx_Normal_ReturnFunc); ok {
			return t(b_)
		}
	}
	var r0 int
	if v := args.Get(0); v != nil {
		r0 = v.(int)
	}
	var r1 error
	if v := args.Get(1); v != nil {
		r1 = v.(error)
	}
	return r0, r1
}

type mockKeepCtx_Normal struct {
	*mock.Call
}

type mockKeepCtx_Normal_ReturnFunc func(b bool) (int, error)

func (c *mockKeepCtx_Normal) Return(arg0 int, arg1 error) *mock.Call {
	return c.Call.Return(arg0, arg1)
}

func (c *mockKeepCtx_Normal) ReturnFn(fn mockKeepCtx_Normal_ReturnFunc) *mock.Call {
	return c.Call.Return(fn)
}

func (x *MockKeepCtx) On_Normal(b_ bool) *mockKeepCtx_Normal {
	return &mockKeepCtx_Normal{Call: x.On("Normal", b_)}
}

func (x *MockKeepCtx) On_Normal_Any() *mockKeepCtx_Normal {
	return &mockKeepCtx_Normal{Call: x.On("Normal", mock.Anything)}
}

func (x *MockKeepCtx) On_Normal_Interface(b_ any) *mockKeepCtx_Normal {
	return &mockKeepCtx_Normal{Call: x.On("Normal", b_)}
}

func (x *MockKeepCtx) Assert_Normal_Called(t *testing.T, b_ bool) bool {
	return x.AssertCalled(t, "Normal", b_)
}

func (x *MockKeepCtx) Assert_Normal_NumberOfCalls(t *testing.T, expectedCalls int) bool {
	return x.AssertNumberOfCalls(t, "Normal", expectedCalls)
}

func (x *MockKeepCtx) Assert_Normal_NotCalled(t *testing.T, b_ bool) bool {
	return x.AssertNotCalled(t, "Normal", b_)
}

func (x *MockKeepCtx) KeepCtx(ctx_ context.Context) {
	args := x.Called(ctx_)
	if len(args) > 0 {
		if t, ok := args.Get(0).(mockKeepCtx_KeepCtx_ReturnFunc); ok {
			t(ctx_)
		}
	}
}

type mockKeepCtx_KeepCtx struct {
	*mock.Call
}

type mockKeepCtx_KeepCtx_ReturnFunc func(ctx context.Context)

func (c *mockKeepCtx_KeepCtx) Return() *mock.Call {
	return c.Call.Return()
}

func (c *mockKeepCtx_KeepCtx) ReturnFn(fn mockKeepCtx_KeepCtx_ReturnFunc) *mock.Call {
	return c.Call.Return(fn)
}

func (x *MockKeepCtx) On_KeepCtx(ctx_ context.Context) *mockKeepCtx_KeepCtx {
	return &mockKeepCtx_KeepCtx{Call: x.On("KeepCtx", ctx_)}
}

func (x *MockKeepCtx) On_KeepCtx_Any() *mockKeepCtx_KeepCtx {
	return &mockKeepCtx_KeepCtx{Call: x.On("KeepCtx", mock.Anything)}
}

func (x *MockKeepCtx) On_KeepCtx_Interface(ctx_ any) *mockKeepCtx_KeepCtx {
	return &mockKeepCtx_KeepCtx{Call: x.On("KeepCtx", ctx_)}
}

func (x *MockKeepCtx) Assert_KeepCtx_Called(t *testing.T, ctx_ context.Context) bool {
	return x.AssertCalled(t, "KeepCtx", ctx_)
}

func (x *MockKeepCtx) Assert_KeepCtx_NumberOfCalls(t *testing.T, expectedCalls int) bool {
	return x.AssertNumberOfCalls(t, "KeepCtx", expectedCalls)
}

func (x *MockKeepCtx) Assert_KeepCtx_NotCalled(t *testing.T, ctx_ context.Context) bool {
	return x.AssertNotCalled(t, "KeepCtx", ctx_)
}
