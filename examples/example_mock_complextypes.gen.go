// Code generated by go-mock. DO NOT EDIT.
// version: go-mock v0.1.1
// source: example.go
// interface: ComplexTypes
// flags: keepctx=false unexported=false
package examples

import (
	"context"
	mock "github.com/stretchr/testify/mock"
	"testing"
)

var _ ComplexTypes = (*MockComplexTypes)(nil)

type MockComplexTypes struct {
	mock.Mock
}

func (x *MockComplexTypes) Normal(b_ bool) (int, error) {
	args := x.Called(b_)
	if len(args) > 0 {
		if t, ok := args.Get(0).(mockComplexTypes_Normal_ReturnFunc); ok {
			return t(b_)
		}
	}
	var r0 int
	if v := args.Get(0); v != nil {
		r0 = v.(int)
	}
	var r1 error
	if v := args.Get(1); v != nil {
		r1 = v.(error)
	}
	return r0, r1
}

type mockComplexTypes_Normal struct {
	*mock.Call
}

type mockComplexTypes_Normal_ReturnFunc func(b bool) (int, error)

func (c *mockComplexTypes_Normal) Return(arg0 int, arg1 error) *mock.Call {
	return c.Call.Return(arg0, arg1)
}

func (c *mockComplexTypes_Normal) ReturnFn(fn mockComplexTypes_Normal_ReturnFunc) *mock.Call {
	return c.Call.Return(fn)
}

func (x *MockComplexTypes) On_Normal(b_ bool) *mockComplexTypes_Normal {
	return &mockComplexTypes_Normal{Call: x.On("Normal", b_)}
}

func (x *MockComplexTypes) On_Normal_Any() *mockComplexTypes_Normal {
	return &mockComplexTypes_Normal{Call: x.On("Normal", mock.Anything)}
}

func (x *MockComplexTypes) On_Normal_Interface(b_ any) *mockComplexTypes_Normal {
	return &mockComplexTypes_Normal{Call: x.On("Normal", b_)}
}

func (x *MockComplexTypes) Assert_Normal_Called(t *testing.T, b_ bool) bool {
	return x.AssertCalled(t, "Normal", b_)
}

func (x *MockComplexTypes) Assert_Normal_NumberOfCalls(t *testing.T, expectedCalls int) bool {
	return x.AssertNumberOfCalls(t, "Normal", expectedCalls)
}

func (x *MockComplexTypes) Assert_Normal_NotCalled(t *testing.T, b_ bool) bool {
	return x.AssertNotCalled(t, "Normal", b_)
}

func (x *MockComplexTypes) RemoveCtx(ctx_ context.Context) {
	args := x.Called()
	if len(args) > 0 {
		if t, ok := args.Get(0).(mockComplexTypes_RemoveCtx_ReturnFunc); ok {
			t(ctx_)
		}
	}
}

type mockComplexTypes_RemoveCtx struct {
	*mock.Call
}

type mockComplexTypes_RemoveCtx_ReturnFunc func(ctx context.Context)

func (c *mockComplexTypes_RemoveCtx) Return() *mock.Call {
	return c.Call.Return()
}

func (c *mockComplexTypes_RemoveCtx) ReturnFn(fn mockComplexTypes_RemoveCtx_ReturnFunc) *mock.Call {
	return c.Call.Return(fn)
}

func (x *MockComplexTypes) On_RemoveCtx() *mockComplexTypes_RemoveCtx {
	return &mockComplexTypes_RemoveCtx{Call: x.On("RemoveCtx")}
}

func (x *MockComplexTypes) Assert_RemoveCtx_Called(t *testing.T) bool {
	return x.AssertCalled(t, "RemoveCtx")
}

func (x *MockComplexTypes) Assert_RemoveCtx_NumberOfCalls(t *testing.T, expectedCalls int) bool {
	return x.AssertNumberOfCalls(t, "RemoveCtx", expectedCalls)
}

func (x *MockComplexTypes) Assert_RemoveCtx_NotCalled(t *testing.T) bool {
	return x.AssertNotCalled(t, "RemoveCtx")
}

func (x *MockComplexTypes) RemoveCtxByType(context_ context.Context) {
	args := x.Called()
	if len(args) > 0 {
		if t, ok := args.Get(0).(mockComplexTypes_RemoveCtxByType_ReturnFunc); ok {
			t(context_)
		}
	}
}

type mockComplexTypes_RemoveCtxByType struct {
	*mock.Call
}

type mockComplexTypes_RemoveCtxByType_ReturnFunc func(context context.Context)

func (c *mockComplexTypes_RemoveCtxByType) Return() *mock.Call {
	return c.Call.Return()
}

func (c *mockComplexTypes_RemoveCtxByType) ReturnFn(fn mockComplexTypes_RemoveCtxByType_ReturnFunc) *mock.Call {
	return c.Call.Return(fn)
}

func (x *MockComplexTypes) On_RemoveCtxByType() *mockComplexTypes_RemoveCtxByType {
	return &mockComplexTypes_RemoveCtxByType{Call: x.On("RemoveCtxByType")}
}

func (x *MockComplexTypes) Assert_RemoveCtxByType_Called(t *testing.T) bool {
	return x.AssertCalled(t, "RemoveCtxByType")
}

func (x *MockComplexTypes) Assert_RemoveCtxByType_NumberOfCalls(t *testing.T, expectedCalls int) bool {
	return x.AssertNumberOfCalls(t, "RemoveCtxByType", expectedCalls)
}

func (x *MockComplexTypes) Assert_RemoveCtxByType_NotCalled(t *testing.T) bool {
	return x.AssertNotCalled(t, "RemoveCtxByType")
}

func (x *MockComplexTypes) RemoveCtxAlias(context_ context.Context) {
	args := x.Called()
	if len(args) > 0 {
		if t, ok := args.Get(0).(mockComplexTypes_RemoveCtxAlias_ReturnFunc); ok {
			t(context_)
		}
	}
}

type mockComplexTypes_RemoveCtxAlias struct {
	*mock.Call
}

type mockComplexTypes_RemoveCtxAlias_ReturnFunc func(context context.Context)

func (c *mockComplexTypes_RemoveCtxAlias) Return() *mock.Call {
	return c.Call.Return()
}

func (c *mockComplexTypes_RemoveCtxAlias) ReturnFn(fn mockComplexTypes_RemoveCtxAlias_ReturnFunc) *mock.Call {
	return c.Call.Return(fn)
}

func (x *MockComplexTypes) On_RemoveCtxAlias() *mockComplexTypes_RemoveCtxAlias {
	return &mockComplexTypes_RemoveCtxAlias{Call: x.On("RemoveCtxAlias")}
}

func (x *MockComplexTypes) Assert_RemoveCtxAlias_Called(t *testing.T) bool {
	return x.AssertCalled(t, "RemoveCtxAlias")
}

func (x *MockComplexTypes) Assert_RemoveCtxAlias_NumberOfCalls(t *testing.T, expectedCalls int) bool {
	return x.AssertNumberOfCalls(t, "RemoveCtxAlias", expectedCalls)
}

func (x *MockComplexTypes) Assert_RemoveCtxAlias_NotCalled(t *testing.T) bool {
	return x.AssertNotCalled(t, "RemoveCtxAlias")
}

func (x *MockComplexTypes) NamedReturns() (i int, e error) {
	args := x.Called()
	if len(args) > 0 {
		if t, ok := args.Get(0).(mockComplexTypes_NamedReturns_ReturnFunc); ok {
			return t()
		}
	}
	var r0 int
	if v := args.Get(0); v != nil {
		r0 = v.(int)
	}
	var r1 error
	if v := args.Get(1); v != nil {
		r1 = v.(error)
	}
	return r0, r1
}

type mockComplexTypes_NamedReturns struct {
	*mock.Call
}

type mockComplexTypes_NamedReturns_ReturnFunc func() (i int, e error)

func (c *mockComplexTypes_NamedReturns) Return(i int, e error) *mock.Call {
	return c.Call.Return(i, e)
}

func (c *mockComplexTypes_NamedReturns) ReturnFn(fn mockComplexTypes_NamedReturns_ReturnFunc) *mock.Call {
	return c.Call.Return(fn)
}

func (x *MockComplexTypes) On_NamedReturns() *mockComplexTypes_NamedReturns {
	return &mockComplexTypes_NamedReturns{Call: x.On("NamedReturns")}
}

func (x *MockComplexTypes) Assert_NamedReturns_Called(t *testing.T) bool {
	return x.AssertCalled(t, "NamedReturns")
}

func (x *MockComplexTypes) Assert_NamedReturns_NumberOfCalls(t *testing.T, expectedCalls int) bool {
	return x.AssertNumberOfCalls(t, "NamedReturns", expectedCalls)
}

func (x *MockComplexTypes) Assert_NamedReturns_NotCalled(t *testing.T) bool {
	return x.AssertNotCalled(t, "NamedReturns")
}

func (x *MockComplexTypes) UnnamedParams(arg0_ context.Context, arg1_ int) {
	args := x.Called(arg0_)
	if len(args) > 0 {
		if t, ok := args.Get(0).(mockComplexTypes_UnnamedParams_ReturnFunc); ok {
			t(arg0_, arg1_)
		}
	}
}

type mockComplexTypes_UnnamedParams struct {
	*mock.Call
}

type mockComplexTypes_UnnamedParams_ReturnFunc func(context.Context, int)

func (c *mockComplexTypes_UnnamedParams) Return() *mock.Call {
	return c.Call.Return()
}

func (c *mockComplexTypes_UnnamedParams) ReturnFn(fn mockComplexTypes_UnnamedParams_ReturnFunc) *mock.Call {
	return c.Call.Return(fn)
}

func (x *MockComplexTypes) On_UnnamedParams(arg0_ int) *mockComplexTypes_UnnamedParams {
	return &mockComplexTypes_UnnamedParams{Call: x.On("UnnamedParams", arg0_)}
}

func (x *MockComplexTypes) On_UnnamedParams_Any() *mockComplexTypes_UnnamedParams {
	return &mockComplexTypes_UnnamedParams{Call: x.On("UnnamedParams", mock.Anything)}
}

func (x *MockComplexTypes) On_UnnamedParams_Interface(arg0_ any) *mockComplexTypes_UnnamedParams {
	return &mockComplexTypes_UnnamedParams{Call: x.On("UnnamedParams", arg0_)}
}

func (x *MockComplexTypes) Assert_UnnamedParams_Called(t *testing.T, arg0_ int) bool {
	return x.AssertCalled(t, "UnnamedParams", arg0_)
}

func (x *MockComplexTypes) Assert_UnnamedParams_NumberOfCalls(t *testing.T, expectedCalls int) bool {
	return x.AssertNumberOfCalls(t, "UnnamedParams", expectedCalls)
}

func (x *MockComplexTypes) Assert_UnnamedParams_NotCalled(t *testing.T, arg0_ int) bool {
	return x.AssertNotCalled(t, "UnnamedParams", arg0_)
}

func (x *MockComplexTypes) SharedTypeParams(a_ string, b_ string, c_ int) {
	args := x.Called(a_, b_, c_)
	if len(args) > 0 {
		if t, ok := args.Get(0).(mockComplexTypes_SharedTypeParams_ReturnFunc); ok {
			t(a_, b_, c_)
		}
	}
}

type mockComplexTypes_SharedTypeParams struct {
	*mock.Call
}

type mockComplexTypes_SharedTypeParams_ReturnFunc func(a string, b string, c int)

func (c *mockComplexTypes_SharedTypeParams) Return() *mock.Call {
	return c.Call.Return()
}

func (c *mockComplexTypes_SharedTypeParams) ReturnFn(fn mockComplexTypes_SharedTypeParams_ReturnFunc) *mock.Call {
	return c.Call.Return(fn)
}

func (x *MockComplexTypes) On_SharedTypeParams(a_ string, b_ string, c_ int) *mockComplexTypes_SharedTypeParams {
	return &mockComplexTypes_SharedTypeParams{Call: x.On("SharedTypeParams", a_, b_, c_)}
}

func (x *MockComplexTypes) On_SharedTypeParams_Any() *mockComplexTypes_SharedTypeParams {
	return &mockComplexTypes_SharedTypeParams{Call: x.On("SharedTypeParams", mock.Anything, mock.Anything, mock.Anything)}
}

func (x *MockComplexTypes) On_SharedTypeParams_Interface(a_ any, b_ any, c_ any) *mockComplexTypes_SharedTypeParams {
	return &mockComplexTypes_SharedTypeParams{Call: x.On("SharedTypeParams", a_, b_, c_)}
}

func (x *MockComplexTypes) Assert_SharedTypeParams_Called(t *testing.T, a_ string, b_ string, c_ int) bool {
	return x.AssertCalled(t, "SharedTypeParams", a_, b_, c_)
}

func (x *MockComplexTypes) Assert_SharedTypeParams_NumberOfCalls(t *testing.T, expectedCalls int) bool {
	return x.AssertNumberOfCalls(t, "SharedTypeParams", expectedCalls)
}

func (x *MockComplexTypes) Assert_SharedTypeParams_NotCalled(t *testing.T, a_ string, b_ string, c_ int) bool {
	return x.AssertNotCalled(t, "SharedTypeParams", a_, b_, c_)
}

func (x *MockComplexTypes) AnonymousInterface(i_ interface {
	TestMethod() (bool, error)
}) {
	args := x.Called(i_)
	if len(args) > 0 {
		if t, ok := args.Get(0).(mockComplexTypes_AnonymousInterface_ReturnFunc); ok {
			t(i_)
		}
	}
}

type mockComplexTypes_AnonymousInterface struct {
	*mock.Call
}

type mockComplexTypes_AnonymousInterface_ReturnFunc func(i interface {
	TestMethod() (bool, error)
})

func (c *mockComplexTypes_AnonymousInterface) Return() *mock.Call {
	return c.Call.Return()
}

func (c *mockComplexTypes_AnonymousInterface) ReturnFn(fn mockComplexTypes_AnonymousInterface_ReturnFunc) *mock.Call {
	return c.Call.Return(fn)
}

func (x *MockComplexTypes) On_AnonymousInterface(i_ interface {
	TestMethod() (bool, error)
}) *mockComplexTypes_AnonymousInterface {
	return &mockComplexTypes_AnonymousInterface{Call: x.On("AnonymousInterface", i_)}
}

func (x *MockComplexTypes) On_AnonymousInterface_Any() *mockComplexTypes_AnonymousInterface {
	return &mockComplexTypes_AnonymousInterface{Call: x.On("AnonymousInterface", mock.Anything)}
}

func (x *MockComplexTypes) On_AnonymousInterface_Interface(i_ any) *mockComplexTypes_AnonymousInterface {
	return &mockComplexTypes_AnonymousInterface{Call: x.On("AnonymousInterface", i_)}
}

func (x *MockComplexTypes) Assert_AnonymousInterface_Called(t *testing.T, i_ interface {
	TestMethod() (bool, error)
}) bool {
	return x.AssertCalled(t, "AnonymousInterface", i_)
}

func (x *MockComplexTypes) Assert_AnonymousInterface_NumberOfCalls(t *testing.T, expectedCalls int) bool {
	return x.AssertNumberOfCalls(t, "AnonymousInterface", expectedCalls)
}

func (x *MockComplexTypes) Assert_AnonymousInterface_NotCalled(t *testing.T, i_ interface {
	TestMethod() (bool, error)
}) bool {
	return x.AssertNotCalled(t, "AnonymousInterface", i_)
}

func (x *MockComplexTypes) AnonymousStruct(s_ struct {
	testVar bool
}) {
	args := x.Called(s_)
	if len(args) > 0 {
		if t, ok := args.Get(0).(mockComplexTypes_AnonymousStruct_ReturnFunc); ok {
			t(s_)
		}
	}
}

type mockComplexTypes_AnonymousStruct struct {
	*mock.Call
}

type mockComplexTypes_AnonymousStruct_ReturnFunc func(s struct {
	testVar bool
})

func (c *mockComplexTypes_AnonymousStruct) Return() *mock.Call {
	return c.Call.Return()
}

func (c *mockComplexTypes_AnonymousStruct) ReturnFn(fn mockComplexTypes_AnonymousStruct_ReturnFunc) *mock.Call {
	return c.Call.Return(fn)
}

func (x *MockComplexTypes) On_AnonymousStruct(s_ struct {
	testVar bool
}) *mockComplexTypes_AnonymousStruct {
	return &mockComplexTypes_AnonymousStruct{Call: x.On("AnonymousStruct", s_)}
}

func (x *MockComplexTypes) On_AnonymousStruct_Any() *mockComplexTypes_AnonymousStruct {
	return &mockComplexTypes_AnonymousStruct{Call: x.On("AnonymousStruct", mock.Anything)}
}

func (x *MockComplexTypes) On_AnonymousStruct_Interface(s_ any) *mockComplexTypes_AnonymousStruct {
	return &mockComplexTypes_AnonymousStruct{Call: x.On("AnonymousStruct", s_)}
}

func (x *MockComplexTypes) Assert_AnonymousStruct_Called(t *testing.T, s_ struct {
	testVar bool
}) bool {
	return x.AssertCalled(t, "AnonymousStruct", s_)
}

func (x *MockComplexTypes) Assert_AnonymousStruct_NumberOfCalls(t *testing.T, expectedCalls int) bool {
	return x.AssertNumberOfCalls(t, "AnonymousStruct", expectedCalls)
}

func (x *MockComplexTypes) Assert_AnonymousStruct_NotCalled(t *testing.T, s_ struct {
	testVar bool
}) bool {
	return x.AssertNotCalled(t, "AnonymousStruct", s_)
}

func (x *MockComplexTypes) Any(arg0_ any) any {
	args := x.Called(arg0_)
	if len(args) > 0 {
		if t, ok := args.Get(0).(mockComplexTypes_Any_ReturnFunc); ok {
			return t(arg0_)
		}
	}
	var r0 any
	if v := args.Get(0); v != nil {
		r0 = v.(any)
	}
	return r0
}

type mockComplexTypes_Any struct {
	*mock.Call
}

type mockComplexTypes_Any_ReturnFunc func(any) any

func (c *mockComplexTypes_Any) Return(arg0 any) *mock.Call {
	return c.Call.Return(arg0)
}

func (c *mockComplexTypes_Any) ReturnFn(fn mockComplexTypes_Any_ReturnFunc) *mock.Call {
	return c.Call.Return(fn)
}

func (x *MockComplexTypes) On_Any(arg0_ any) *mockComplexTypes_Any {
	return &mockComplexTypes_Any{Call: x.On("Any", arg0_)}
}

func (x *MockComplexTypes) On_Any_Any() *mockComplexTypes_Any {
	return &mockComplexTypes_Any{Call: x.On("Any", mock.Anything)}
}

func (x *MockComplexTypes) On_Any_Interface(arg0_ any) *mockComplexTypes_Any {
	return &mockComplexTypes_Any{Call: x.On("Any", arg0_)}
}

func (x *MockComplexTypes) Assert_Any_Called(t *testing.T, arg0_ any) bool {
	return x.AssertCalled(t, "Any", arg0_)
}

func (x *MockComplexTypes) Assert_Any_NumberOfCalls(t *testing.T, expectedCalls int) bool {
	return x.AssertNumberOfCalls(t, "Any", expectedCalls)
}

func (x *MockComplexTypes) Assert_Any_NotCalled(t *testing.T, arg0_ any) bool {
	return x.AssertNotCalled(t, "Any", arg0_)
}

func (x *MockComplexTypes) Channels(i_ chan<- int, o_ <-chan int) (chan bool, error) {
	args := x.Called(i_, o_)
	if len(args) > 0 {
		if t, ok := args.Get(0).(mockComplexTypes_Channels_ReturnFunc); ok {
			return t(i_, o_)
		}
	}
	var r0 chan bool
	if v := args.Get(0); v != nil {
		r0 = v.(chan bool)
	}
	var r1 error
	if v := args.Get(1); v != nil {
		r1 = v.(error)
	}
	return r0, r1
}

type mockComplexTypes_Channels struct {
	*mock.Call
}

type mockComplexTypes_Channels_ReturnFunc func(i chan<- int, o <-chan int) (chan bool, error)

func (c *mockComplexTypes_Channels) Return(arg0 chan bool, arg1 error) *mock.Call {
	return c.Call.Return(arg0, arg1)
}

func (c *mockComplexTypes_Channels) ReturnFn(fn mockComplexTypes_Channels_ReturnFunc) *mock.Call {
	return c.Call.Return(fn)
}

func (x *MockComplexTypes) On_Channels(i_ chan<- int, o_ <-chan int) *mockComplexTypes_Channels {
	return &mockComplexTypes_Channels{Call: x.On("Channels", i_, o_)}
}

func (x *MockComplexTypes) On_Channels_Any() *mockComplexTypes_Channels {
	return &mockComplexTypes_Channels{Call: x.On("Channels", mock.Anything, mock.Anything)}
}

func (x *MockComplexTypes) On_Channels_Interface(i_ any, o_ any) *mockComplexTypes_Channels {
	return &mockComplexTypes_Channels{Call: x.On("Channels", i_, o_)}
}

func (x *MockComplexTypes) Assert_Channels_Called(t *testing.T, i_ chan<- int, o_ <-chan int) bool {
	return x.AssertCalled(t, "Channels", i_, o_)
}

func (x *MockComplexTypes) Assert_Channels_NumberOfCalls(t *testing.T, expectedCalls int) bool {
	return x.AssertNumberOfCalls(t, "Channels", expectedCalls)
}

func (x *MockComplexTypes) Assert_Channels_NotCalled(t *testing.T, i_ chan<- int, o_ <-chan int) bool {
	return x.AssertNotCalled(t, "Channels", i_, o_)
}

func (x *MockComplexTypes) Variadic(i_ int, i2_ ...int) (bool, error) {
	args := x.Called(i_, i2_)
	if len(args) > 0 {
		if t, ok := args.Get(0).(mockComplexTypes_Variadic_ReturnFunc); ok {
			return t(i_, i2_...)
		}
	}
	var r0 bool
	if v := args.Get(0); v != nil {
		r0 = v.(bool)
	}
	var r1 error
	if v := args.Get(1); v != nil {
		r1 = v.(error)
	}
	return r0, r1
}

type mockComplexTypes_Variadic struct {
	*mock.Call
}

type mockComplexTypes_Variadic_ReturnFunc func(i int, i2 ...int) (bool, error)

func (c *mockComplexTypes_Variadic) Return(arg0 bool, arg1 error) *mock.Call {
	return c.Call.Return(arg0, arg1)
}

func (c *mockComplexTypes_Variadic) ReturnFn(fn mockComplexTypes_Variadic_ReturnFunc) *mock.Call {
	return c.Call.Return(fn)
}

func (x *MockComplexTypes) On_Variadic(i_ int, i2_ ...int) *mockComplexTypes_Variadic {
	return &mockComplexTypes_Variadic{Call: x.On("Variadic", i_, i2_)}
}

func (x *MockComplexTypes) On_Variadic_Any() *mockComplexTypes_Variadic {
	return &mockComplexTypes_Variadic{Call: x.On("Variadic", mock.Anything, mock.Anything)}
}

func (x *MockComplexTypes) On_Variadic_Interface(i_ any, i2_ any) *mockComplexTypes_Variadic {
	return &mockComplexTypes_Variadic{Call: x.On("Variadic", i_, i2_)}
}

func (x *MockComplexTypes) Assert_Variadic_Called(t *testing.T, i_ int, i2_ ...int) bool {
	return x.AssertCalled(t, "Variadic", i_, i2_)
}

func (x *MockComplexTypes) Assert_Variadic_NumberOfCalls(t *testing.T, expectedCalls int) bool {
	return x.AssertNumberOfCalls(t, "Variadic", expectedCalls)
}

func (x *MockComplexTypes) Assert_Variadic_NotCalled(t *testing.T, i_ int, i2_ ...int) bool {
	return x.AssertNotCalled(t, "Variadic", i_, i2_)
}
